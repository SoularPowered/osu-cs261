Shawn S Hillyer
CS 261-400
Date 1/10/2016
amortizedAnalysis.txt
 
Assignment 2, Part 2
----------------------------------------------------------------------------------------------------------------------------------------
1. How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts
out at capacity 8, assuming that the array will double in capacity each time a new item is added to an already full dynamic array? As
N (ie. the number of pushes) grows large, under this strategy for resizing, what is the big-oh complexity for a push?

	 8c operations to add the first 8 elements. 
	+8c operations to reallocate and increase capacity to 16
	+1c to add the element just pushed
	<capacity == 16, size == 9>
	+7c to add the additional 7 elements to get to the 16th element
	+16c to reallocate and increase capacity to 32
	+1c to add the element just pushed
	<capacity == 32, size == 17>
	+15c to add the elements to get to the 32nd push
	
	8+8+1+7+16+1+15 = 56 total cost units per 32 consecutive pushes 
	
	= 1.75 cost units per push. 
	
	big-oh complexity is O(1)+



----------------------------------------------------------------------------------------------------------------------------------------
2. How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts out
at capacity 8, assuming that the array will grow by a constant 2 spaces each time a new item is added to an already full dynamic
array? As N (ie. the number of pushes) grows large, under this strategy for resizing, what is the big-oh complexity for a push?

	+8c operations to add first 8 elements
	+8c operations to reallocate the first elements
	+1c operation to push the value
	<capacity = 10, size == 9)
	+1c operation to push the value
	+
	capacity = 10, size=10 




----------------------------------------------------------------------------------------------------------------------------------------
3. Suppose that a dynamic array stack doubles its capacity when it is full, and shrinks (on Pop only) its capacity by
half when the array is half full or less. Can you devise a sequence of N push() and pop() operations which will result in poor
performance (O(N^2) total cost)? How might you adjust the array's shrinking policy to avoid this? (Hint: You may assume that the
initial capacity of the array is N/2.)